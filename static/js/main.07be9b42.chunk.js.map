{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","eventData","useState","isExpanded","setExpanded","className","summary","start","dateTime","location","description","href","htmlLink","onClick","EventList","events","map","event","id","CitySearch","suggestions","locations","updateEvents","query","setQuery","isVisible","setIsVisible","handleItemClick","suggestion","type","value","onChange","e","target","onFocus","style","display","filter","toUpperCase","includes","NumberOfEvents","eventsDisplayed","setEventsDisplayed","extractLocations","Set","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","removeQuery","path","window","history","pushState","pathname","newUrl","protocol","host","getEvents","getAccessToken","token","NProgress","url","axios","get","data","localStorage","setItem","JSON","stringify","done","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","search","code","results","authUrl","getToken","encodeCode","encodeURIComponent","err","access_token","App","setEvents","setLocations","displayEvents","setDisplayEvents","useEffect","response","relevantEvents","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.07be9b42.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport function Event({ eventData }) {\r\n  let [isExpanded, setExpanded] = useState(false);\r\n\r\n  return (\r\n    <div className=\"event-card\">\r\n      <div className=\"event-card__title\">{eventData.summary}</div>\r\n      <div className=\"event-card__date\">{eventData.start.dateTime}</div>\r\n      <div className=\"event-card__location\">{eventData.location}</div>\r\n      {isExpanded && (\r\n        <>\r\n          <div className=\"event-card__description\">{eventData.description}</div>\r\n          <a href={eventData.htmlLink} className=\"event-card__calendar-link\">\r\n            <button>See Event in Calendar</button>\r\n          </a>\r\n        </>\r\n      )}\r\n      <button\r\n        className=\"event-card__details-toggle\"\r\n        onClick={() => setExpanded(!isExpanded)}\r\n      >\r\n        Show Details\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Event } from './Event';\r\n\r\nexport function EventList({ events }) {\r\n  return (\r\n    <ul className=\"event-list\">\r\n      {events.map((event) => (\r\n        <li key={event.id} className=\"event-list__item\">\r\n          <Event eventData={event} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport function CitySearch({ locations, updateEvents }) {\r\n  let [query, setQuery] = useState(''),\r\n    [isVisible, setIsVisible] = useState(false);\r\n\r\n  const filterSuggestions = (suggestions) => {\r\n    return query\r\n      ? suggestions.filter((location) =>\r\n          location.toUpperCase().includes(query.toUpperCase())\r\n        )\r\n      : suggestions;\r\n  };\r\n\r\n  const handleItemClick = (suggestion) => {\r\n    setQuery(suggestion);\r\n    setIsVisible(false);\r\n    updateEvents(suggestion);\r\n  };\r\n\r\n  return (\r\n    <div className=\"city-search\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"search-bar\"\r\n        value={query}\r\n        onChange={(e) => setQuery(e.target.value)}\r\n        onFocus={() => setIsVisible(true)}\r\n      />\r\n      <ul className=\"suggestions\" style={isVisible ? {} : { display: 'none' }}>\r\n        {filterSuggestions(locations).map((suggestion) => (\r\n          <li key={suggestion} onClick={() => handleItemClick(suggestion)}>\r\n            {suggestion}\r\n          </li>\r\n        ))}\r\n        <li key=\"all\" onClick={() => handleItemClick('all')}>\r\n          <b>See all cities</b>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport function NumberOfEvents() {\r\n  let [eventsDisplayed, setEventsDisplayed] = useState(32);\r\n\r\n  return (\r\n    <input\r\n      type=\"number\"\r\n      className=\"events-displayed-input\"\r\n      value={eventsDisplayed}\r\n      onChange={(e) => setEventsDisplayed(e.target.value)}\r\n    ></input>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\n//Takes an events array and returns an array of location with duplicates excluded\r\nexport const extractLocations = (events) => {\r\n  const extractLocations = events.map((event) => event.location);\r\n  const locations = [...new Set(extractLocations)];\r\n\r\n  return locations;\r\n};\r\n\r\nconst checkToken = async (accessToken) => {\r\n  const result = await fetch(\r\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n  )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n  return result;\r\n};\r\n\r\nconst removeQuery = () => {\r\n  const path = window.history.pushState && window.location.pathname;\r\n  const newUrl =\r\n    window.location.protocol + '//' + window.location.host + path\r\n      ? window.location.pathname\r\n      : '';\r\n\r\n  window.history.pushState('', '', newUrl);\r\n};\r\n\r\nexport const getEvents = async () => {\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    NProgress.start();\r\n    removeQuery();\r\n\r\n    const url =\r\n      'https://mj84us3vwj.execute-api.us-west-2.amazonaws.com/dev/api/get-events' +\r\n      '/' +\r\n      token;\r\n    const result = await axios.get(url);\r\n\r\n    if (result.data) {\r\n      const locations = extractLocations(result.data.events);\r\n      localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n      localStorage.setItem('locations', JSON.stringify(locations));\r\n    }\r\n\r\n    NProgress.done();\r\n    return result.data.events;\r\n  }\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const accessToken = localStorage.getItem('access_token');\r\n  const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n  if (!accessToken || tokenCheck.error) {\r\n    await localStorage.removeItem('access_token');\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = await searchParams.get('code');\r\n    if (!code) {\r\n      const results = await axios.get(\r\n        'https://mj84us3vwj.execute-api.us-west-2.amazonaws.com/dev/api/get-auth-url'\r\n      );\r\n      const { authUrl } = results.data;\r\n      return (window.location.href = authUrl);\r\n    }\r\n    return code && getToken(code);\r\n  }\r\n  return accessToken;\r\n};\r\n\r\nconst getToken = async (code) => {\r\n  const encodeCode = encodeURIComponent(code);\r\n  const { access_token } = await fetch(\r\n    `https://mj84us3vwj.execute-api.us-west-2.amazonaws.com/dev/api/token/${encodeCode}`\r\n  )\r\n    .then((res) => res.json())\r\n    .catch((err) => err);\r\n\r\n  access_token && localStorage.setItem('access_token', access_token);\r\n\r\n  return access_token;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport './nprogress.css';\r\n\r\n//App Components\r\nimport { EventList } from './EventList';\r\nimport { CitySearch } from './CitySearch';\r\nimport { NumberOfEvents } from './NumberOfEvents';\r\n\r\nimport { getEvents, extractLocations } from './api';\r\n\r\nfunction App() {\r\n  let [events, setEvents] = useState([]),\r\n    [locations, setLocations] = useState([]),\r\n    [displayEvents, setDisplayEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getEvents().then((response) => {\r\n      setEvents(response);\r\n      setDisplayEvents(response);\r\n      setLocations(extractLocations(response));\r\n    });\r\n  }, []);\r\n\r\n  const updateEvents = (location) => {\r\n    const relevantEvents =\r\n      location === 'all'\r\n        ? events\r\n        : events.filter((event) => event.location === location);\r\n    setDisplayEvents(relevantEvents);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <CitySearch locations={locations} updateEvents={updateEvents} />\r\n      <EventList events={displayEvents} />\r\n      <NumberOfEvents />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}